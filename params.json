{"name":"daq2val","tagline":"","body":"----------------------------------------------------------\r\n### Get the scripts (do it once)\r\n\r\n- Make a new folder (or use a pre-existing one):\r\n     - `mkdir daq2test`\r\n\r\n- Get the scripts:\r\n     - `git clone /nfshome0/stiegerb/Workspace/daq2val && cd daq2val`\r\n     - `git checkout production`\r\n\r\n- To get a new version simply do:\r\n     - `git pull`\r\n\r\n----------------------------------------------------------\r\n### Setup (do it once before running)\r\n\r\n- ssh to dvsrv-C2F36-07-01 (or any other machine that has python 2.6+ and can ssh to the daq2 system)\r\n\t- `ssh dvsrv-C2F36-07-01`\r\n\r\n- Get a kerberos token:\r\n\t- `kinit`\r\n\r\n- Change into the working directory (`daq2test/daq2val/` in the example above):\r\n\t- `cd daq2test/daq2val/`\r\n\r\n- Set the environment:\r\n\t- `source setenv-daq2.sh`\r\n\r\n\tor, when running on the daq2val system:\r\n\t- `source setenv-daq2val.sh`\r\n\r\n- Start launchers:\r\n(make sure the symbol map makes sense and that you can ssh to each of the machines with no password or key query)\r\n\t- `./daq2Control/daq2Launchers.py --start -m daq2SymbolMap.txt  -l /tmp/launcherLog.txt`\r\n\r\n- To follow the xdaq output (best in a new window):\r\n\t- `tail -f /tmp/launcherLog.txt`\r\n\r\n- To stop the launchers again:\r\n\t- `./daq2Control/daq2Launchers.py --stop -m daq2SymbolMap.txt`\r\n\r\n- Check launcher status:\r\n\t- `./daq2Control/daq2Launchers.py --status -m daq2SymbolMap.txt`\r\n\r\n----------------------------------------------------------\r\n### Simple running (mostly for debugging)\r\n- Note that you can do most of the following with `--dry` first to see what it will do without sending anything. For more options and help, use any of the scripts with `--help` (or `-h`).\r\n\r\n- Start a config by using the `runDAQ2Test.py` script:\r\n\t- `./daq2Control/runDAQ2Test.py --start 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\r\n- To stop it again, use the `--kill` option:\r\n\t- `./daq2Control/runDAQ2Test.py --kill 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\r\n- You can also do the steps separately:\r\n\t- Setup:\r\n\r\n\t`./daq2Control/runDAQ2Test.py --prepare 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\t- Configure:\r\n\r\n\t`./daq2Control/runDAQ2Test.py --configure 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\t- Enable:\r\n\r\n\t`./daq2Control/runDAQ2Test.py --enable 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\t- Stop (should get back to \"Configured\", but no guarantee):\r\n\r\n\t`./daq2Control/runDAQ2Test.py --stop 12s12fx1x4_ibv.xml 4096 0.0 -v 5`\r\n\r\n\t- For more options, use `--help`\r\n\r\n----------------------------------------------------------\r\n### Scanning (to do a measurement)\r\n- Run a scan of fragment sizes over a single configuration:\r\n\t- `./daq2Control/runDAQ2Scan.py --stopRestart --maxSize 16000 --duration 120 12s12fx1x4_ibv.xml -v 5 -o output/`\r\n\t- To set a custom scanning range, use `--maxSize`, `--minSize`, and `--stepSize`, with the argument in bytes.\r\n\t- To set the duration for each step use `--duration` with an argument in seconds.\r\n\t- For all the options use `--help`, but note that some are not entirely bugfree...\r\n\r\n- Run a scan of fragment sizes over a set of configurations:\r\n\t- `./daq2Control/scanAll.py --stopRestart --maxSize 16000 --duration 120 overnight/*.xml -v 5 -o output/output/`\r\n\t- `scanAll.py` takes all the same arguments as `runDAQ2Scan.py`\r\n\r\n\r\n----------------------------------------------------------\r\n### Configurator\r\n\r\n- For EvB/gevb2g with FEROLs as input (run with `-h` to get all the options):\r\n\t- `./daq2Control/makeDAQ2Config.py 12s12fx1x4`\r\n\t- To use the gevb2g instead of Remi's EvB: `--useGevb2g`\r\n\t- To use UDAPL instead of IBV: `--useUDAPL`\r\n\t- To change the ferol running mode: `--ferolMode frl_autotrigger` (options are `ferol_emulator` (default), `frl_autotrigger`, `frl_gtpe_trigger`, `efed_slink_gtpe`)\r\n\t- For all the options, try `--help`\r\n\r\n- For MStreamIO:\r\n\t- `./daq2Control/makeMSIOConfig.py 4x4`\r\n\r\n- For gevb2g with input emulator:\r\n\t- `./daq2Control/makeMSIOConfig.py --useGevb2g 4x4`\r\n\r\n\r\n----------------------------------------------------------\r\n### Symbolmaps\r\n\r\n- Create symbolmaps for the DAQ production system (this uses `2015-05-05-infiniband-ports.csv` as input. To blacklist machines, change the 0 to a 1 in the corresponding line/column):\r\n\t- `./daq2Control/makeDAQ2Symbolmap.py --nRUs 8 --nBUs 8 --splitBy 8 -v -o daq2SymbolMap_8x8.txt`\r\n\t- To take only N machines from one leaf: `--splitBy N`\r\n\t- To use only RU machines: `--useOnlyRUs`\r\n\t- To add a dedicated EVM machine: `--addEVM`\r\n\t- To maximally distribute the machines over all leafs: `--shuffle`\r\n\t- For all the options, try `--help`\r\n\r\n- Print the cabling for a DAQ production system symbolmap:\r\n\t- `./daq2Control/printSwitchCabling.py customSymbolmap.txt`\r\n\r\n----------------------------------------------------------\r\n### Plotting\r\n\r\n- To create a throughput vs fragment size plot from a .csv file obtained from a scan (or downloaded from the web archive), use the `plotData.py` script in the plotting subdir. Note that this needs python 2.7+ and ROOT with pyROOT to be installed:\r\n\t- `./plotting/plotData.py 1x1.csv 2x2.csv --legend '1x1' '2x2'`\r\n- Some of the additional plotting options are:\r\n\t- `-o` to set the output file\r\n\t- `--minx`, `--maxx`, `--miny`, `--maxy` to set the plotting range\r\n\t- `--logy`, `--nologx` toggle logarithmic scale on y or x axis. Default is logarithmic in x.\r\n\t- `--tag TEXT`, `--subtag TEXT` to add text boxes on the canvas.\r\n\t- `--title`, `--titleX`, `--titleY` to set canvas title and axis labels\r\n\t- `--legend 'TEXT1' 'TEXT2' 'TEXT3'` to set the legend. Number of arguments needs to match with the number of .csv files provided.\r\n\t- `--sizeFromBU`, take the fragment size from the BU measurement instead of from the input\r\n\t- `--rate` Set the rate curve (in kHz) to be displayed. Default is 100 kHz.\r\n\r\n----------------------------------------------------------\r\n### Troubleshoot\r\n\r\n- If you get an error like this:\r\n```\r\n  File \"./daq2Control/makeDAQ2Config.py\", line 89\r\n    configurator.evbns = ('gevb2g' if options.useGevb2g and not\r\n                                    ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\n\t- Probably means you're on a machine with an old version of python (i.e. older than 2.6). Try `ssh dvsrv-C2F36-07-01`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}